name: Elasticsearch-Logstash-Kibana Continuous Integration Pipeline # Full descriptive workflow name

# Define the events that trigger the workflow
on:
  # Trigger the workflow when there are changes to Dockerfiles or .sh files on push
  push:
    paths:
      - "**.yml" # Trigger workflow if any .yml file is changed

  # Trigger the workflow on pull request if there are changes to Dockerfiles or .sh files
  pull_request:
    paths:
      - "**.yml" # Trigger workflow if any .yml file is changed

  # Allow manual triggering of the workflow
  workflow_dispatch: # Manually trigger the workflow

jobs:
  run-elk-stack-build-and-health-check:
    name: Build ELK Stack and Perform Health Check # Human-readable job name
    runs-on: ubuntu-latest # Use the latest Ubuntu virtual machine

    steps:
      # Step 1: Retrieve the repository from GitHub onto the runner
      - name: Check Out Source Code from GitHub Repository
        uses: actions/checkout@v4 # Official GitHub Action to clone the repository

      # Step 2: Build Docker images and start Elasticsearch, Logstash, and Kibana services
      - name: Build Docker Images and Start Elasticsearch, Logstash, and Kibana
        run: docker-compose up -d --build # Uses docker-compose.yml to build images and run containers in detached mode

      # Step 3: Pause execution to allow all ELK services to initialize
      - name: Pause for Service Initialization
        run: sleep 60 # Wait 60 seconds for Elasticsearch, Logstash, and Kibana to finish startup routines

      # Step 4: Verify that Elasticsearch is responding to HTTP requests
      - name: Perform Single HTTP Request to Elasticsearch API
        run: curl http://localhost:9200/ # Send a request to the Elasticsearch API to check its health
        continue-on-error: true # Allow the step to fail without stopping the workflow

      # Step 5: Clean up all Docker containers, networks, and volumes created by the ELK stack
      - name: Tear Down Elasticsearch, Logstash, and Kibana Services
        if: always() # Ensure cleanup runs even if previous steps fail
        run: docker-compose down --volumes # Stop containers and remove all associated networks and volumes
